<%
/**
 *  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */
(function () {
    var log = new Log();

    if (!user) {
        response.sendError(401, 'unauthorized to access assets');
        return;
    }
    var utils = require('/modules/utils.js');
    var configs = require('/configs/designer.json');
    var fileUtils = require('/modules/file-utils.js');

    var CONTEXT = '/portal';
    var PROVIDERS_LOCATION = '/extensions/providers/';
    var PARTIAL_LOCATION = '/partials/';
    var CHART_LOCATION = '/extensions/chart-templates/';
    var GADGETS_LOCATION = '/store/' + session.get('user').domain + '/fs/gadget/';
    var GADGET_TEMPLATE_LOCATION = '/templates/gadgets/gadget-generation-templates/';
    var TEMP_GADGET_LOCATION = '/temp/';

    var PROVIDER_API_FILE = '/api.js';
    var CHART_API_FILE = '/api.js';
    var PROVIDER_CONFIG_FILE = '/config.json';
    var CHART_CONFIG_FILE = '/config.json';
    var GADGET_XML_FILE = '/gadget.xml';

    var VALUE_SET = 'valueSet';
    var SCHEME_NOTIFIER = '$COLUMN_NAMES';
    var PROVIDER_CONF = 'provider-conf';
    var PROVIDER_NAME = 'provider-name';
    var CHART_CONF = 'chart-conf';
    var CHART_NAME = 'chart-name';
    var GADGET_NAME = 'gadget-name';

    response.contentType = 'application/json';

    var action = request.getParameter("action");
    var data = request.getContent();

    if (action === 'getProviders') {
        var providers = [];
        var providerIgnoreList = configs.gadgetGeneration.ignoreProviders;
        var allProviders = fileUtils.getFileNameList(PROVIDERS_LOCATION);

        var requiredProviders = allProviders.filter(function (el) {
            return providerIgnoreList.indexOf(el) < 0;
        });

        for (var i = 0; i < requiredProviders.length; i++) {
            var configJson = require(PROVIDERS_LOCATION + requiredProviders[i] + PROVIDER_CONFIG_FILE);
            providers.push(configJson.info);
        }
        print(providers);
        return;
    } else if (action === 'getProviderConfig') {
        var providerApi = require(PROVIDERS_LOCATION + data.provider + PROVIDER_API_FILE );
        print(providerApi.getConfig().config);
        return;
    } else if (action === 'getProviderAdvancedUI') {
        try {
            file = new File(PROVIDERS_LOCATION + data.provider + PARTIAL_LOCATION + data.partial + '.hbs');
            if (!file.isExists()) {
                return null;
            }
            file.open('r');
            var customPartial = file.readAll();
        } finally {
            file.close();
        }
        print(customPartial);
        return;
    } else if (action === 'getData') {
        var provider = data[PROVIDER_CONF][PROVIDER_NAME];
        var providerApi = require(PROVIDERS_LOCATION + provider + PROVIDER_API_FILE );
        var validate = providerApi.validate(data[PROVIDER_CONF]);
        if (!validate.error) {
            var dataSet = providerApi.getData(data[PROVIDER_CONF], 10);
            var output = {};

            output.tableHeaders = Object.keys(dataSet[0]);
            output.tableRows = [];

            for (var i in dataSet) {
                _obj = [];
                for (var k in dataSet[i]) {
                    _obj.push(dataSet[i][k])
                }
                output.tableRows.push(_obj);
            }
            print(output);
            return;
        }
        else {
            log.error("Data validation failed for Provider Configuration");
            print(validate);
            return;
        }

    } else if (action === 'getChartList') {
        var chartList = [];
        var chartDirList = fileUtils.getFileNameList(CHART_LOCATION);

        for (var i = 0; i < chartDirList.length; i++) {
            var chartConfigJson = require(CHART_LOCATION + chartDirList[i] + CHART_CONFIG_FILE);
            chartList.push(chartConfigJson.info);
        }
        print(chartList);
        return;
    } else if (action === 'getChartConfig') {
        var schema;
        var provider = data[PROVIDER_CONF][PROVIDER_NAME];
        var providerApi = require(PROVIDERS_LOCATION + provider + PROVIDER_API_FILE );
        var validate = providerApi.validate(data[PROVIDER_CONF]);
        if (!validate.error) {
            schema = providerApi.getSchema(data[PROVIDER_CONF]);
        } else {
            log.error("Data validation failed for Provider Configuration");
            print(validate);
            return;
        }
        var chartApi = require(CHART_LOCATION + data.chartType + CHART_API_FILE );
        if (!schema.error) {
            var modifiedChartConfig = chartApi.getConfig(schema);
            for (var i in modifiedChartConfig) {
                if (modifiedChartConfig[i][VALUE_SET] && SCHEME_NOTIFIER === modifiedChartConfig[i][VALUE_SET][0]) {
                    modifiedChartConfig[i][VALUE_SET].splice(0);
                    for (var j in schema) {
                        modifiedChartConfig[i][VALUE_SET].push(schema[j]['fieldName']);
                    }
                }
            }
            print(modifiedChartConfig);
            return;
        } else {
            log.error("Schema Retrieval Failed");
            print(schema);
            return;
        }
    } else if (action === 'getChartAdvancedUI') {
        try {
            file = new File(CHART_LOCATION + data.chartType + PARTIAL_LOCATION + data.partial + '.hbs');
            if (!file.isExists()) {
                return null;
            }
            file.open('r');
            var customPartial = file.readAll();
        } finally {
            file.close();
        }
        print(customPartial);
        return;
    } else if (action === 'preview') {
        var chartConf = data[CHART_CONF];
        var chart = chartConf[CHART_NAME];
        var chartApiLocation = CHART_LOCATION + chart + CHART_API_FILE;
        var chartApi = require(chartApiLocation);
        var validate = chartApi.validate(chartConf);
        if(!validate.error){
            var gadgetID = chartConf['gadget-name'].replace(/ /g,"_");

            var gadgetStoreFile = new File(GADGETS_LOCATION + gadgetID);
            if(gadgetStoreFile.isExists()){
                print({
                    error: true,
                    message: "Gadget with the same name already exists"
                });
                return;
            }

            var tempDir = new File(TEMP_GADGET_LOCATION);
            if(!tempDir.isExists()){
                tempDir.mkdir();
            }

            var gadgetDirLocation = TEMP_GADGET_LOCATION + gadgetID;
            var gadgetDir = new File(gadgetDirLocation);
            if(gadgetDir.isExists()) {
                gadgetDir.del();
            }

            var provider = data[PROVIDER_CONF][PROVIDER_NAME];
            var providerApiLocation = PROVIDERS_LOCATION + provider + PROVIDER_API_FILE ;
            var providerApi = require(providerApiLocation);
            var isPushMode = false;
            if(providerApi.getMode().toLowerCase() === 'push'){
                isPushMode = true;
            }

            if(isPushMode){
                var providerClient = new File(PROVIDERS_LOCATION + provider + '/client.js');
                fileUtils.copyFile(providerClient, gadgetDirLocation + '/js/core/provider-client.js');
            }

            var gadgetJsonData = {};
            gadgetJsonData['gadget_id'] = gadgetID;
            gadgetJsonData['gadget_title'] = chartConf[GADGET_NAME];
            gadgetJsonData['gadget_url'] = 'gadget/'+ gadgetID + GADGET_XML_FILE;
            fileUtils.transformCopyFile(GADGET_TEMPLATE_LOCATION + 'gadget.json.hbs',
                            gadgetDirLocation +'/gadget.json', gadgetJsonData );

            var gadgetCoreJsData = {};
            gadgetCoreJsData['gadget_location'] = CONTEXT + gadgetDirLocation;
            gadgetCoreJsData['isPullMode'] = !isPushMode;
            fileUtils.transformCopyFile(GADGET_TEMPLATE_LOCATION + 'js/gadget-core.js.hbs',
                            gadgetDirLocation +'/js/core/gadget-core.js', gadgetCoreJsData);

            var gadgetXmlData = {};
            gadgetXmlData['gadget_title'] = chartConf[GADGET_NAME];
            gadgetXmlData['isPushMode'] = isPushMode;
            gadgetXmlData['chart-type'] = chart;
            var chartConf = require(CHART_LOCATION + chart + CHART_CONFIG_FILE);

            if(chartConf['imports']) {
                var chartSpecificJs = chartConf['imports']["js"];
                gadgetXmlData['chart-js'] = chartSpecificJs;
                var chartSpecificCss = chartConf['imports']["css"];
                gadgetXmlData['chart-css'] = chartSpecificCss;

                if(chartConf['imports']["libs"]) {
                    var chartSpecificJsLibs = chartConf['imports']["libs"]["js"];
                    gadgetXmlData['chart-vendor-js'] = chartSpecificJsLibs;
                    var chartSpecificCssLibs = chartConf['imports']["libs"]["css"];
                    gadgetXmlData['chart-vendor-css'] = chartSpecificCssLibs;
                }

                if(chartConf['imports']["shared-libs"]) {
                    var sharedJs = chartConf['imports']["shared-libs"]["js"];
                    gadgetXmlData['shared-js'] = sharedJs;
                    var sharedCss = chartConf['imports']["shared-libs"]["css"];
                    gadgetXmlData['shared-css'] = sharedCss;
                }
            }

            var providerConf = require(PROVIDERS_LOCATION + provider + PROVIDER_CONFIG_FILE);
            var providerLibs = providerConf['provider-libs'];
            gadgetXmlData['provider-libs'] = providerLibs;
            gadgetXmlData['gadget_location'] = CONTEXT + gadgetDirLocation;
            fileUtils.transformCopyFile(GADGET_TEMPLATE_LOCATION + 'gadget.xml.hbs',
                            gadgetDirLocation + GADGET_XML_FILE, gadgetXmlData);

            var gadgetControllerFile = new File(GADGET_TEMPLATE_LOCATION + 'gadget-controller.jag');
            fileUtils.copyFile(gadgetControllerFile, gadgetDirLocation + '/gadget-controller.jag');

            var chartLibsDir = new File(CHART_LOCATION + chart + '/libs/');
            fileUtils.copyDir(chartLibsDir, gadgetDirLocation);

            var chartJsDir = new File(CHART_LOCATION + chart + '/js/');
            fileUtils.copyDir(chartJsDir, gadgetDirLocation);

            var chartCssDir = new File(CHART_LOCATION + chart + '/css/');
            fileUtils.copyDir(chartCssDir, gadgetDirLocation);

            var providerLibsDir = new File(PROVIDERS_LOCATION + provider + '/provider-libs/');
            fileUtils.copyDir(providerLibsDir, gadgetDirLocation + '/js/');

            var providerApiFile = new File(providerApiLocation);
            fileUtils.copyFile(providerApiFile, gadgetDirLocation + '/js/core/' + provider + '-provider-api.js');

            var chartApiFile = new File(chartApiLocation);
            fileUtils.copyFile(chartApiFile, gadgetDirLocation + '/js/core/' + chart + '-api.js');

            var previewFile = new File('/theme/templates/preview.jag');
            if(previewFile.isExists()){
                previewFile.del();
            }
            var previewData = {};
            previewData['absolute_gadget_url'] = utils.getCarbonServerAddress('https') + CONTEXT + gadgetDirLocation +
                    GADGET_XML_FILE + '?' + new Date().getTime();
            fileUtils.transformCopyFile(GADGET_TEMPLATE_LOCATION + 'preview.jag.hbs',
                    '/theme/templates/preview.jag', previewData);

            var thumbnail = new File(GADGET_TEMPLATE_LOCATION + 'thumbnail.png');
            fileUtils.copyFile(thumbnail,gadgetDirLocation + '/thumbnail.png');

            fileUtils.writeToFile(data, gadgetDirLocation + '/conf.json');
            print({
                error: false
            });
            return;
        }
        else {
            log.error("Data validation failed for Chart Configuration");
            print(validate);
            return;
        }



    } else if(action === 'addGadgetToStore'){
        var gadgetID = data[CHART_CONF]['gadget-name'].replace(/ /g,"_");
        var providerApiLocation = PROVIDERS_LOCATION + data[PROVIDER_CONF][PROVIDER_NAME] + PROVIDER_API_FILE ;
        var providerApi = require(providerApiLocation);
        var isPushMode = false;
        if(providerApi.getMode().toLowerCase() === 'push'){
            isPushMode = true;
        }

        fileUtils.replaceText(TEMP_GADGET_LOCATION + gadgetID +'/js/core/gadget-core.js', CONTEXT + TEMP_GADGET_LOCATION + gadgetID,
                        CONTEXT + GADGETS_LOCATION + gadgetID);

        fileUtils.replaceText(TEMP_GADGET_LOCATION + gadgetID + GADGET_XML_FILE, CONTEXT + TEMP_GADGET_LOCATION + gadgetID,
                           CONTEXT + GADGETS_LOCATION + gadgetID);

        var gadgetDir = new File(TEMP_GADGET_LOCATION + gadgetID);
        fileUtils.copyDir(gadgetDir, GADGETS_LOCATION);

        if(gadgetDir.isExists()) {
            gadgetDir.del();
        }
        print({
            error: false
        });
        return;
    } else if (action === 'testConnection') {
        var providerApiLocation = PROVIDERS_LOCATION + data[PROVIDER_CONF][PROVIDER_NAME] + PROVIDER_API_FILE ;
        var providerApi = require(providerApiLocation);
        var validate = providerApi.validate(data[PROVIDER_CONF]);
        var dataSet = providerApi.getData(data[PROVIDER_CONF], 10);
        if (validate.error) {
            print({
                error: true,
                message: "Database configuration error"
            });
            return;
        } else if (dataSet.error) {
            print({
                error: true,
                message: "Database schema validation error"
            });
            return;
        }
        else {
            print({
                error: false
            });
            return;
        }
    }

    response.sendError(404, JSON.stringify({
        error: true
    }));

}());


%>
